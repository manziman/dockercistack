pipeline {
    node {

        ws("${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}/") {
        
            withEnv(["NODEDIR=${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_ID}"]) {
                stage('Pre Test'){
                    echo 'Building test docker image'

                    sh 'curl http://<REPO_IP:PORT>/<REPO_OWNER>/<REPO_NAME>/raw/master/dockerfile/Dockerfile >> Dockerfile'
                    sh 'docker build -t <IMAGE_NAME> .'
                    
                }
                
                stage('Run Test'){
                echo 'Running container'
                
                    sh 'docker network create --attachable <IMAGE_NAME>'
                    
                    sh 'docker run -d --rm --name node-server -p 3000:3000 --network test <IMAGE_NAME>'
                    
                }
                
                stage('Website Test'){
                    echo 'Testing webapp'                    
                    
                    sh 'sleep 5s'
                    sh 'curl http://<LOCAL_IP>:3000/'
                    
                    sh 'rm -rf /root/reports/node/*'
                    
                    sh """[ \"\$(docker run -t --rm --name robot-server --network test-express -v /root/reports/node:/opt/robotframework/reports -v /root/test/node:/opt/robotframework/tests robot-framework-xvfb robot -d /opt/robotframework/reports/ /opt/robotframework/tests/ | grep '0 passed')\" = '' ] && exit 0 || echo 'Tests failed!'; exit 1"""

                    sh """docker stop \$(docker ps | grep node-server | grep -Eo '^[^ ]+')"""
                    sh 'docker network rm test-express'
                    
                }
                
                stage('Artifactory preparation/send') {
                
                    def server = Artifactory.newServer url: 'http://<ARTIFACTORY_IP:PORT>/artifactory/', username: 'xxxx', password: 'xxxx'
                        
                    sh "cd ${NODEDIR}"
                    //Find out commit hash
                    sh """git ls-remote http://<REPO_IP:PORT>/<REPO_OWNER>/<REPO_NAME>.git | awk 'NR==1{print \$1}' > commit"""
                    def commit = readFile("${NODEDIR}/commit").trim()
                
                    //Find out current branch
                    sh """git ls-remote http://<REPO_IP:PORT>/<REPO_OWNER>/<REPO_NAME>.git | awk 'NR==2{print \$2}' | sed 's/.*\\///g' > GIT_BRANCH"""
                    def branch = readFile("${NODEDIR}/GIT_BRANCH").trim()
                
                    //strip off repo-name/origin/ (optional)
                    branch = branch.substring(branch.lastIndexOf('/') + 1)
                
                    def docker = "${NODEDIR}/<REPO_NAME>-docker-${branch}-${commit}.tar.gz"
                    
                    echo "Saving docker image ${docker}"
                    
                    sh """docker save -o ${NODEDIR}/<REPO_NAME>-docker-${branch}-${commit}.tar test-image;  gzip ${NODEDIR}/<REPO_NAME>-docker-${branch}-${commit}.tar"""

                    def uploadDockerSpec = """{
                     "files": [
                      {
                          "pattern": "$NODEDIR/*docker-*.tar.gz",
                          "target": "<REPO_NAME>/$docker"
                        }
                     ]
                    }"""
                
                    echo "Uploading ${docker}.gz to Artifactory"
                    
                    server.upload(uploadDockerSpec)
                }
            }
        }   
    }
}